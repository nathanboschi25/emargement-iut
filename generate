#!./.venv/bin/python

import argparse
import datetime
import os

from dotenv import load_dotenv

from services.ade import get_events_from_ade
from services.document import generate_pdf


class TextStyles:
    COLOR_PURPLE = '\033[95m'
    COLOR_CYAN = '\033[96m'
    COLOR_DARKCYAN = '\033[36m'
    COLOR_BLUE = '\033[94m'
    COLOR_GREEN = '\033[92m'
    COLOR_YELLOW = '\033[93m'
    COLOR_RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    CLEAR_STYLES = '\033[0m'


def get_args():
    parser = argparse.ArgumentParser(description='Generate signature paper from a template file.', add_help=True)
    parser.add_argument('-e', '--env-version', type=str, help='Env file path', default='.env')
    parser.add_argument('-q', '--quick', action='store_true',
                        help='Quick mode - no questions asked - document is printed if possible')
    parser.add_argument('-t', '--template', type=str, help='Template file path', default='template.html')
    parser.add_argument('-o', '--output', type=str, help='Output file path', default='generated_file.pdf')
    parser.add_argument('-d', '--day', type=datetime.date.fromisoformat, help='Day to generate - format "1999-12-31"',
                        default=datetime.date.today())
    return parser.parse_args()


def connect_to_vpn():
    print(f'{TextStyles.BOLD + TextStyles.COLOR_BLUE}Connecting to {os.getenv("VPN_NAME")}...{TextStyles.CLEAR_STYLES}')
    os.system(f'nmcli con up {os.getenv("VPN_NAME")}')


def disconnect_from_vpn():
    print(f'{TextStyles.BOLD + TextStyles.COLOR_BLUE}Disconnecting from {os.getenv("VPN_NAME")}...{TextStyles.CLEAR_STYLES}')
    os.system(f'nmcli con down {os.getenv("VPN_NAME")}')


def initial_actions_return_values(program_args):
    print(f'{TextStyles.BOLD + TextStyles.COLOR_BLUE}Generating file for {program_args.day}...{TextStyles.CLEAR_STYLES}')

    print(f'Class: {os.getenv("CLASS")}')

    students = os.getenv('STUDENTS').split(',')
    students.sort()
    print(f'Students: {students}')

    teachers = os.getenv('TEACHERS').split(',')
    teachers.sort()
    print(f'Teachers: {teachers}')

    events = get_events_from_ade(os.getenv('ADE_URL'), teachers, program_args.day)
    print(f'Events: {events}')

    return events, students

def find_host(hosts):
    for host in hosts.split(','):
        result = os.system(f'ping -w 1 -c 1 {host}')
        if result == 0:
            return host
    return None


def generate_and_print_document(program_args, quick=False):
    (events, students) = initial_actions_return_values(program_args)

    if not events:
        print(f'{TextStyles.BOLD + TextStyles.COLOR_RED}No courses for this day.{TextStyles.CLEAR_STYLES}')
        if quick:
            exit(1)
        elif input('Do you want to generate a file with 5 empty events? (y/n) ') == 'y':
            events = [{'start': '', 'end': '', 'title': '', 'teacher': ''}] * 5
        else:
            exit(0)

    generate_pdf(program_args, events, students)

    if quick or input('Do you want to print the file? (y/n) ') == 'y':

        connect_to_vpn()

        ssh_host = find_host(os.getenv("SSH_HOSTS"))
        if ssh_host is None:
            print(f'{TextStyles.BOLD + TextStyles.COLOR_RED}No host found to print the file.{TextStyles.CLEAR_STYLES}')
            disconnect_from_vpn()
            exit(1)

        print(f'{TextStyles.BOLD + TextStyles.COLOR_BLUE}Copying file...{TextStyles.CLEAR_STYLES}')
        # Copy the file on the remote server
        result = os.system(f'scp {program_args.output} {ssh_host}@{os.getenv("SSH_HOST")}:~/')

        if result != 0:
            print(f'{TextStyles.BOLD + TextStyles.COLOR_RED}Error while copying the file.{TextStyles.CLEAR_STYLES}')
            disconnect_from_vpn()
            exit(1)

        print(f'{TextStyles.BOLD + TextStyles.COLOR_BLUE}Printing file...{TextStyles.CLEAR_STYLES}')

        # Print the file on the remote server
        if ssh_host is None:
            print(f'{TextStyles.BOLD + TextStyles.COLOR_RED}Error while finding a host to print the file.{TextStyles.CLEAR_STYLES}')
            disconnect_from_vpn()
            exit(1)

        result = os.system(
            f'ssh {os.getenv("SSH_USER")}@{ssh_host} "lp -d {os.getenv("PRINTER_ADDRESS")} ~/{program_args.output}"')

        if result != 0:
            print(f'{TextStyles.BOLD + TextStyles.COLOR_RED}Error while printing the file.{TextStyles.CLEAR_STYLES}')
            disconnect_from_vpn()
            exit(1)

        disconnect_from_vpn()


if __name__ == '__main__':
    program_args = get_args()

    load_dotenv(dotenv_path=program_args.env_version)

    generate_and_print_document(program_args, quick=program_args.quick)
